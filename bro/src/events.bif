# Generated by binpac_quickstart

# In this file, you'll define the events that your analyzer will
# generate. A sample event is included.

# ## TODO: Edit the sample event, and add more events.

## Generated for BSAP connections
##
## See `Google <http://lmgtfy.com/?q=BSAP>`__ for more information about BSAP
##
## c: The connection
##
event bsap_event%(c: connection, header: BSAP::Header, data: string%);

## Generated for polls
##
## The POLL message is used by a master to interrogate its slaves 
## and determine if the slave is alive, and if so, to solicit data. 
##
## c: The connection
##
##			Contained in header
## ADDR = Address of polled node
## SER  = Serial number of message 
## POLL = Function code 85H
##
## pri: Priority of requested data (see Note) 
##
## A priority of 0 indicates that alarms or data can be accepted; A priority of 10H indicates that alarms cannot be accepted.
##
event poll_event%(c: connection, header: BSAP::Header%); 


## Generated for acks
##
## The ACK (also called DOWN-ACK) message is used by a slave 
## to acknowledge receipt of a data message (not a POLL) from its master.
## Master address is always 0
##
## c: The connection
##
##			contained in header
## ADDR = Address of master node (always 0) 
## SER  = Serial number of message ACK'd
## DTA  = Function code 86H
## SLV  = Local address of slave responding
## NSB  = Node status byte
##
## buffers: Number of buffers in use
##
event ack_event%(c: connection, header: BSAP::Header, buffers: count%);


## Generated for nondata-acks
##
## The ACK-NODATA message is used by a slave to acknowledge 
## receipt of a POLL and indicate that it has no data messages to respond with. 
## Master address is always 0
##
## c: The connection
##
##			contained in header
## ADDR = Address of master node (always 0) 
## SER  = Serial number of message ACK'd
## NOD  = Function code 87H
## SLV  = Local address of slave responding
## NSB  = Node status byte
##
## buffers: Number of buffers in use
##
event ackNoData_event%(c: connection, header: BSAP::Header, buffers: count%);


## Generated for naks
##
## The NAK message is used by a slave to indicate that a message 
## other than a POLL was  received  but  there  is  insufficient  buffer  space  available.  
## Master address is always 0
##
## c: The connection
##
##			contained in header
## ADDR = Address of master node (always 0) 
## SER  = Serial number of message NACK'd
## NAK  = Function code 95H
## SLV  = Local address of slave responding
## NSB  = Node status byte
##
## buffers: Number of buffers in use
##
event nak_event%(c: connection, header: BSAP::Header, buffers: count%);


## Generated for up-acks
##
## c: The connection
##
## The  UP-ACK  message  is  used  by  the  master  to  inform  
## the  slave  that  it  successfully  received and buffered the message.
##
##		contained in header
## ADDR  =  Local address of slave
## SERM  =  Master's message serial number
## UTA   =  Function code 8BH
##
## serialNum: Serial number of message ack'd
##
event upAck_event%(c: connection, header: BSAP::Header%);


## Generated for all data messages
##
## c: The connection
##
## Local messages are those which do not have to pass through any 
## nodes to reach their destination. 
## By definition, the first node to receive a local message is the destination.
##
##		contained in header
## LADD = Local address
## SER 	= Message serial number
## DFUN = Destination function code
## SEQ 	= Application sequence number
## SFUN = Source function code
## NSB 	= Node Status Byte 
##
## data: Application-dependent data(up to 241 bytes)
## 
## Global data messages are those which must pass through at least 
## one master before reaching their destination.
## Global data messages are those that contain the 12 byte global header 
## to route the message to the specified destination. 
## Generally, global messages are used when the destination node is more 
## than one network layer away. This message can, however, 
## also be used to address a node in the next network layer.
##
##		contained in header
## LADD = Local address + 80H
## SER 	= Message serial number
## DADD = Destination global address
## SADD = Source global address
## CTL 	= Control byte 
## DFUN = Destination function code
## SEQ 	= Application sequence number
## SFUN = Source function code
## NSB 	= Node Status Byte
##
## data: Application-dependent data(up to 246 bytes)
##
event dataMessage_event%(c: connection, header: BSAP::Header, data: string%);


## DialUpAck
##
## todo
